{"ast":null,"code":"/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function (window, document) {\n  'use strict'; // Exits early if all IntersectionObserver and IntersectionObserverEntry\n  // features are natively supported.\n\n  if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n    // Minimal polyfill for Edge 15's lack of `isIntersecting`\n    // See: https://github.com/w3c/IntersectionObserver/issues/211\n    if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n      Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {\n        get: function () {\n          return this.intersectionRatio > 0;\n        }\n      });\n    }\n\n    return;\n  }\n  /**\n   * An IntersectionObserver registry. This registry exists to hold a strong\n   * reference to IntersectionObserver instances currently observing a target\n   * element. Without this registry, instances without another reference may be\n   * garbage collected.\n   */\n\n\n  var registry = [];\n  /**\n   * Creates the global IntersectionObserverEntry constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n   * @param {Object} entry A dictionary of instance properties.\n   * @constructor\n   */\n\n  function IntersectionObserverEntry(entry) {\n    this.time = entry.time;\n    this.target = entry.target;\n    this.rootBounds = entry.rootBounds;\n    this.boundingClientRect = entry.boundingClientRect;\n    this.intersectionRect = entry.intersectionRect || getEmptyRect();\n    this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.\n\n    var targetRect = this.boundingClientRect;\n    var targetArea = targetRect.width * targetRect.height;\n    var intersectionRect = this.intersectionRect;\n    var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.\n\n    if (targetArea) {\n      // Round the intersection ratio to avoid floating point math issues:\n      // https://github.com/w3c/IntersectionObserver/issues/324\n      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n    } else {\n      // If area is zero and is intersecting, sets to 1, otherwise to 0\n      this.intersectionRatio = this.isIntersecting ? 1 : 0;\n    }\n  }\n  /**\n   * Creates the global IntersectionObserver constructor.\n   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n   * @param {Function} callback The function to be invoked after intersection\n   *     changes have queued. The function is not invoked if the queue has\n   *     been emptied by calling the `takeRecords` method.\n   * @param {Object=} opt_options Optional configuration options.\n   * @constructor\n   */\n\n\n  function IntersectionObserver(callback, opt_options) {\n    var options = opt_options || {};\n\n    if (typeof callback != 'function') {\n      throw new Error('callback must be a function');\n    }\n\n    if (options.root && options.root.nodeType != 1) {\n      throw new Error('root must be an Element');\n    } // Binds and throttles `this._checkForIntersections`.\n\n\n    this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.\n\n    this._callback = callback;\n    this._observationTargets = [];\n    this._queuedEntries = [];\n    this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.\n\n    this.thresholds = this._initThresholds(options.threshold);\n    this.root = options.root || null;\n    this.rootMargin = this._rootMarginValues.map(function (margin) {\n      return margin.value + margin.unit;\n    }).join(' ');\n  }\n  /**\n   * The minimum interval within which the document will be checked for\n   * intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n  /**\n   * The frequency in which the polyfill polls for intersection changes.\n   * this can be updated on a per instance basis and must be set prior to\n   * calling `observe` on the first target.\n   */\n\n  IntersectionObserver.prototype.POLL_INTERVAL = null;\n  /**\n   * Use a mutation observer on the root element\n   * to detect intersection changes.\n   */\n\n  IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n  /**\n   * Starts observing a target element for intersection changes based on\n   * the thresholds values.\n   * @param {Element} target The DOM element to observe.\n   */\n\n  IntersectionObserver.prototype.observe = function (target) {\n    var isTargetAlreadyObserved = this._observationTargets.some(function (item) {\n      return item.element == target;\n    });\n\n    if (isTargetAlreadyObserved) {\n      return;\n    }\n\n    if (!(target && target.nodeType == 1)) {\n      throw new Error('target must be an Element');\n    }\n\n    this._registerInstance();\n\n    this._observationTargets.push({\n      element: target,\n      entry: null\n    });\n\n    this._monitorIntersections();\n\n    this._checkForIntersections();\n  };\n  /**\n   * Stops observing a target element for intersection changes.\n   * @param {Element} target The DOM element to observe.\n   */\n\n\n  IntersectionObserver.prototype.unobserve = function (target) {\n    this._observationTargets = this._observationTargets.filter(function (item) {\n      return item.element != target;\n    });\n\n    if (!this._observationTargets.length) {\n      this._unmonitorIntersections();\n\n      this._unregisterInstance();\n    }\n  };\n  /**\n   * Stops observing all target elements for intersection changes.\n   */\n\n\n  IntersectionObserver.prototype.disconnect = function () {\n    this._observationTargets = [];\n\n    this._unmonitorIntersections();\n\n    this._unregisterInstance();\n  };\n  /**\n   * Returns any queue entries that have not yet been reported to the\n   * callback and clears the queue. This can be used in conjunction with the\n   * callback to obtain the absolute most up-to-date intersection information.\n   * @return {Array} The currently queued entries.\n   */\n\n\n  IntersectionObserver.prototype.takeRecords = function () {\n    var records = this._queuedEntries.slice();\n\n    this._queuedEntries = [];\n    return records;\n  };\n  /**\n   * Accepts the threshold value from the user configuration object and\n   * returns a sorted array of unique threshold values. If a value is not\n   * between 0 and 1 and error is thrown.\n   * @private\n   * @param {Array|number=} opt_threshold An optional threshold value or\n   *     a list of threshold values, defaulting to [0].\n   * @return {Array} A sorted list of unique and valid threshold values.\n   */\n\n\n  IntersectionObserver.prototype._initThresholds = function (opt_threshold) {\n    var threshold = opt_threshold || [0];\n    if (!Array.isArray(threshold)) threshold = [threshold];\n    return threshold.sort().filter(function (t, i, a) {\n      if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n        throw new Error('threshold must be a number between 0 and 1 inclusively');\n      }\n\n      return t !== a[i - 1];\n    });\n  };\n  /**\n   * Accepts the rootMargin value from the user configuration object\n   * and returns an array of the four margin values as an object containing\n   * the value and unit properties. If any of the values are not properly\n   * formatted or use a unit other than px or %, and error is thrown.\n   * @private\n   * @param {string=} opt_rootMargin An optional rootMargin value,\n   *     defaulting to '0px'.\n   * @return {Array<Object>} An array of margin objects with the keys\n   *     value and unit.\n   */\n\n\n  IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {\n    var marginString = opt_rootMargin || '0px';\n    var margins = marginString.split(/\\s+/).map(function (margin) {\n      var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n\n      if (!parts) {\n        throw new Error('rootMargin must be specified in pixels or percent');\n      }\n\n      return {\n        value: parseFloat(parts[1]),\n        unit: parts[2]\n      };\n    }); // Handles shorthand.\n\n    margins[1] = margins[1] || margins[0];\n    margins[2] = margins[2] || margins[0];\n    margins[3] = margins[3] || margins[1];\n    return margins;\n  };\n  /**\n   * Starts polling for intersection changes if the polling is not already\n   * happening, and if the page's visibility state is visible.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._monitorIntersections = function () {\n    if (!this._monitoringIntersections) {\n      this._monitoringIntersections = true; // If a poll interval is set, use polling instead of listening to\n      // resize and scroll events or DOM mutations.\n\n      if (this.POLL_INTERVAL) {\n        this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);\n      } else {\n        addEvent(window, 'resize', this._checkForIntersections, true);\n        addEvent(document, 'scroll', this._checkForIntersections, true);\n\n        if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n          this._domObserver = new MutationObserver(this._checkForIntersections);\n\n          this._domObserver.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n          });\n        }\n      }\n    }\n  };\n  /**\n   * Stops polling for intersection changes.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unmonitorIntersections = function () {\n    if (this._monitoringIntersections) {\n      this._monitoringIntersections = false;\n      clearInterval(this._monitoringInterval);\n      this._monitoringInterval = null;\n      removeEvent(window, 'resize', this._checkForIntersections, true);\n      removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this._domObserver) {\n        this._domObserver.disconnect();\n\n        this._domObserver = null;\n      }\n    }\n  };\n  /**\n   * Scans each observation target for intersection changes and adds them\n   * to the internal entries queue. If new entries are found, it\n   * schedules the callback to be invoked.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._checkForIntersections = function () {\n    var rootIsInDom = this._rootIsInDom();\n\n    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n    this._observationTargets.forEach(function (item) {\n      var target = item.element;\n      var targetRect = getBoundingClientRect(target);\n\n      var rootContainsTarget = this._rootContainsTarget(target);\n\n      var oldEntry = item.entry;\n\n      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);\n\n      var newEntry = item.entry = new IntersectionObserverEntry({\n        time: now(),\n        target: target,\n        boundingClientRect: targetRect,\n        rootBounds: rootRect,\n        intersectionRect: intersectionRect\n      });\n\n      if (!oldEntry) {\n        this._queuedEntries.push(newEntry);\n      } else if (rootIsInDom && rootContainsTarget) {\n        // If the new entry intersection ratio has crossed any of the\n        // thresholds, add a new entry.\n        if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n          this._queuedEntries.push(newEntry);\n        }\n      } else {\n        // If the root is not in the DOM or target is not contained within\n        // root but the previous entry for this target had an intersection,\n        // add a new record indicating removal.\n        if (oldEntry && oldEntry.isIntersecting) {\n          this._queuedEntries.push(newEntry);\n        }\n      }\n    }, this);\n\n    if (this._queuedEntries.length) {\n      this._callback(this.takeRecords(), this);\n    }\n  };\n  /**\n   * Accepts a target and root rect computes the intersection between then\n   * following the algorithm in the spec.\n   * TODO(philipwalton): at this time clip-path is not considered.\n   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n   * @param {Element} target The target DOM element\n   * @param {Object} rootRect The bounding rect of the root after being\n   *     expanded by the rootMargin value.\n   * @return {?Object} The final intersection rect object or undefined if no\n   *     intersection is found.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, rootRect) {\n    // If the element isn't displayed, an intersection can't happen.\n    if (window.getComputedStyle(target).display == 'none') return;\n    var targetRect = getBoundingClientRect(target);\n    var intersectionRect = targetRect;\n    var parent = getParentNode(target);\n    var atRoot = false;\n\n    while (!atRoot) {\n      var parentRect = null;\n      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.\n\n      if (parentComputedStyle.display == 'none') return;\n\n      if (parent == this.root || parent == document) {\n        atRoot = true;\n        parentRect = rootRect;\n      } else {\n        // If the element has a non-visible overflow, and it's not the <body>\n        // or <html> element, update the intersection rect.\n        // Note: <body> and <html> cannot be clipped to a rect that's not also\n        // the document rect, so no need to compute a new intersection.\n        if (parent != document.body && parent != document.documentElement && parentComputedStyle.overflow != 'visible') {\n          parentRect = getBoundingClientRect(parent);\n        }\n      } // If either of the above conditionals set a new parentRect,\n      // calculate new intersection data.\n\n\n      if (parentRect) {\n        intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n        if (!intersectionRect) break;\n      }\n\n      parent = getParentNode(parent);\n    }\n\n    return intersectionRect;\n  };\n  /**\n   * Returns the root rect after being expanded by the rootMargin value.\n   * @return {Object} The expanded root rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._getRootRect = function () {\n    var rootRect;\n\n    if (this.root) {\n      rootRect = getBoundingClientRect(this.root);\n    } else {\n      // Use <html>/<body> instead of window since scroll bars affect size.\n      var html = document.documentElement;\n      var body = document.body;\n      rootRect = {\n        top: 0,\n        left: 0,\n        right: html.clientWidth || body.clientWidth,\n        width: html.clientWidth || body.clientWidth,\n        bottom: html.clientHeight || body.clientHeight,\n        height: html.clientHeight || body.clientHeight\n      };\n    }\n\n    return this._expandRectByRootMargin(rootRect);\n  };\n  /**\n   * Accepts a rect and expands it by the rootMargin value.\n   * @param {Object} rect The rect object to expand.\n   * @return {Object} The expanded rect.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {\n    var margins = this._rootMarginValues.map(function (margin, i) {\n      return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;\n    });\n\n    var newRect = {\n      top: rect.top - margins[0],\n      right: rect.right + margins[1],\n      bottom: rect.bottom + margins[2],\n      left: rect.left - margins[3]\n    };\n    newRect.width = newRect.right - newRect.left;\n    newRect.height = newRect.bottom - newRect.top;\n    return newRect;\n  };\n  /**\n   * Accepts an old and new entry and returns true if at least one of the\n   * threshold values has been crossed.\n   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n   *    particular target element or null if no previous entry exists.\n   * @param {IntersectionObserverEntry} newEntry The current entry for a\n   *    particular target element.\n   * @return {boolean} Returns true if a any threshold has been crossed.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {\n    // To make comparing easier, an entry that has a ratio of 0\n    // but does not actually intersect is given a value of -1\n    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;\n    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios\n\n    if (oldRatio === newRatio) return;\n\n    for (var i = 0; i < this.thresholds.length; i++) {\n      var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio\n      // and the old ratio are on the opposite sides of a threshold.\n\n      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {\n        return true;\n      }\n    }\n  };\n  /**\n   * Returns whether or not the root element is an element and is in the DOM.\n   * @return {boolean} True if the root element is an element and is in the DOM.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootIsInDom = function () {\n    return !this.root || containsDeep(document, this.root);\n  };\n  /**\n   * Returns whether or not the target element is a child of root.\n   * @param {Element} target The target element to check.\n   * @return {boolean} True if the target element is a child of root.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._rootContainsTarget = function (target) {\n    return containsDeep(this.root || document, target);\n  };\n  /**\n   * Adds the instance to the global IntersectionObserver registry if it isn't\n   * already present.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._registerInstance = function () {\n    if (registry.indexOf(this) < 0) {\n      registry.push(this);\n    }\n  };\n  /**\n   * Removes the instance from the global IntersectionObserver registry.\n   * @private\n   */\n\n\n  IntersectionObserver.prototype._unregisterInstance = function () {\n    var index = registry.indexOf(this);\n    if (index != -1) registry.splice(index, 1);\n  };\n  /**\n   * Returns the result of the performance.now() method or null in browsers\n   * that don't support the API.\n   * @return {number} The elapsed time since the page was requested.\n   */\n\n\n  function now() {\n    return window.performance && performance.now && performance.now();\n  }\n  /**\n   * Throttles a function and delays its execution, so it's only called at most\n   * once within a given time period.\n   * @param {Function} fn The function to throttle.\n   * @param {number} timeout The amount of time that must pass before the\n   *     function can be called again.\n   * @return {Function} The throttled function.\n   */\n\n\n  function throttle(fn, timeout) {\n    var timer = null;\n    return function () {\n      if (!timer) {\n        timer = setTimeout(function () {\n          fn();\n          timer = null;\n        }, timeout);\n      }\n    };\n  }\n  /**\n   * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n   * @param {Node} node The DOM node to add the event handler to.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to add.\n   * @param {boolean} opt_useCapture Optionally adds the even to the capture\n   *     phase. Note: this only works in modern browsers.\n   */\n\n\n  function addEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.addEventListener == 'function') {\n      node.addEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.attachEvent == 'function') {\n      node.attachEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Removes a previously added event handler from a DOM node.\n   * @param {Node} node The DOM node to remove the event handler from.\n   * @param {string} event The event name.\n   * @param {Function} fn The event handler to remove.\n   * @param {boolean} opt_useCapture If the event handler was added with this\n   *     flag set to true, it should be set to true here in order to remove it.\n   */\n\n\n  function removeEvent(node, event, fn, opt_useCapture) {\n    if (typeof node.removeEventListener == 'function') {\n      node.removeEventListener(event, fn, opt_useCapture || false);\n    } else if (typeof node.detatchEvent == 'function') {\n      node.detatchEvent('on' + event, fn);\n    }\n  }\n  /**\n   * Returns the intersection between two rect objects.\n   * @param {Object} rect1 The first rect.\n   * @param {Object} rect2 The second rect.\n   * @return {?Object} The intersection rect or undefined if no intersection\n   *     is found.\n   */\n\n\n  function computeRectIntersection(rect1, rect2) {\n    var top = Math.max(rect1.top, rect2.top);\n    var bottom = Math.min(rect1.bottom, rect2.bottom);\n    var left = Math.max(rect1.left, rect2.left);\n    var right = Math.min(rect1.right, rect2.right);\n    var width = right - left;\n    var height = bottom - top;\n    return width >= 0 && height >= 0 && {\n      top: top,\n      bottom: bottom,\n      left: left,\n      right: right,\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Shims the native getBoundingClientRect for compatibility with older IE.\n   * @param {Element} el The element whose bounding rect to get.\n   * @return {Object} The (possibly shimmed) rect of the element.\n   */\n\n\n  function getBoundingClientRect(el) {\n    var rect;\n\n    try {\n      rect = el.getBoundingClientRect();\n    } catch (err) {// Ignore Windows 7 IE11 \"Unspecified error\"\n      // https://github.com/w3c/IntersectionObserver/pull/205\n    }\n\n    if (!rect) return getEmptyRect(); // Older IE\n\n    if (!(rect.width && rect.height)) {\n      rect = {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    }\n\n    return rect;\n  }\n  /**\n   * Returns an empty rect object. An empty rect is returned when an element\n   * is not in the DOM.\n   * @return {Object} The empty rect.\n   */\n\n\n  function getEmptyRect() {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  /**\n   * Checks to see if a parent element contains a child element (including inside\n   * shadow DOM).\n   * @param {Node} parent The parent element.\n   * @param {Node} child The child element.\n   * @return {boolean} True if the parent node contains the child node.\n   */\n\n\n  function containsDeep(parent, child) {\n    var node = child;\n\n    while (node) {\n      if (node == parent) return true;\n      node = getParentNode(node);\n    }\n\n    return false;\n  }\n  /**\n   * Gets the parent node of an element or its host element if the parent node\n   * is a shadow root.\n   * @param {Node} node The node whose parent to get.\n   * @return {Node|null} The parent node or null if no parent exists.\n   */\n\n\n  function getParentNode(node) {\n    var parent = node.parentNode;\n\n    if (parent && parent.nodeType == 11 && parent.host) {\n      // If the parent is a shadow root, return the host element.\n      return parent.host;\n    }\n\n    return parent;\n  } // Exposes the constructors globally.\n\n\n  window.IntersectionObserver = IntersectionObserver;\n  window.IntersectionObserverEntry = IntersectionObserverEntry;\n})(window, document);","map":{"version":3,"sources":["/Users/flachen/Desktop/bird-app/client/node_modules/intersection-observer/intersection-observer.js"],"names":["window","document","IntersectionObserverEntry","prototype","Object","defineProperty","get","intersectionRatio","registry","entry","time","target","rootBounds","boundingClientRect","intersectionRect","getEmptyRect","isIntersecting","targetRect","targetArea","width","height","intersectionArea","Number","toFixed","IntersectionObserver","callback","opt_options","options","Error","root","nodeType","_checkForIntersections","throttle","bind","THROTTLE_TIMEOUT","_callback","_observationTargets","_queuedEntries","_rootMarginValues","_parseRootMargin","rootMargin","thresholds","_initThresholds","threshold","map","margin","value","unit","join","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","isTargetAlreadyObserved","some","item","element","_registerInstance","push","_monitorIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","slice","opt_threshold","Array","isArray","sort","t","i","a","isNaN","opt_rootMargin","marginString","margins","split","parts","exec","parseFloat","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","forEach","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","now","_hasCrossedThreshold","getComputedStyle","display","parent","getParentNode","atRoot","parentRect","parentComputedStyle","body","documentElement","overflow","computeRectIntersection","html","top","left","right","clientWidth","bottom","clientHeight","_expandRectByRootMargin","rect","newRect","oldRatio","newRatio","containsDeep","indexOf","index","splice","performance","fn","timeout","timer","setTimeout","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","rect1","rect2","Math","max","min","el","err","child","parentNode","host"],"mappings":"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","sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n"]},"metadata":{},"sourceType":"script"}